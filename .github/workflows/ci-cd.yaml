name: CI/CD

on:
  push:
    branches: ["main"]
    # Теги формата vMAJOR.MINOR.PATCH, напр. v1.0.0
    tags:
      - "v*.*.*"

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE to lowercase (job output + env)
        id: set-image
        run: |
          IMAGE=ghcr.io/$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (sha + latest)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.set-image.outputs.image }}:${{ github.sha }}
            ${{ steps.set-image.outputs.image }}:latest

      - name: Push audit (verify sha + latest exist in registry)
        if: "!startsWith(github.ref, 'refs/tags/')"
        env:
          IMAGE: ${{ steps.set-image.outputs.image }}
        run: |
          set -euo pipefail
          for TAG in "${GITHUB_SHA}" latest; do
            IMG="$IMAGE:$TAG"
            echo "Inspecting $IMG"
            docker buildx imagetools inspect "$IMG" || docker manifest inspect "$IMG" || {
              echo "WARNING: cannot inspect $IMG"
            }
          done

      - name: Build and push (tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.set-image.outputs.image }}:${{ github.ref_name }}

      - name: Push audit (verify tag image in registry)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          IMAGE: ${{ steps.set-image.outputs.image }}
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          IMG="$IMAGE:$TAG"
          echo "Inspecting $IMG"
          docker buildx imagetools inspect "$IMG" || docker manifest inspect "$IMG" || {
            echo "WARNING: cannot inspect $IMG"
          }

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Restore kubeconfig
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          set -euo pipefail

          echo "Restoring kubeconfig..."
          mkdir -p "$HOME/.kube"
          K="$HOME/.kube/config"
          TMP="$HOME/.kube/config.tmp"

          if [ -z "${KUBE_CONFIG_DATA:-}" ]; then
            echo "KUBE_CONFIG_DATA is empty" >&2
            exit 1
          fi

          cleanup() {
            rm -f "$TMP" 2>/dev/null || true
          }
          trap cleanup EXIT

          looks_like_kube() {
            grep -qE '(^|[[:space:]])apiVersion:' "$1" 2>/dev/null
          }

          # 1) as-is (plain kubeconfig)
          printf '%s' "$KUBE_CONFIG_DATA" > "$TMP"
          if looks_like_kube "$TMP"; then
            mv "$TMP" "$K"
            chmod 600 "$K"
            echo "Restored kubeconfig (plain)"
            exit 0
          fi

          # 2) unescape literal \n sequences
          printf '%b' "$KUBE_CONFIG_DATA" > "$TMP"
          if looks_like_kube "$TMP"; then
            mv "$TMP" "$K"
            chmod 600 "$K"
            echo "Restored kubeconfig (unescaped \\n)"
            exit 0
          fi

          # 3) try base64 decode (GNU or BSD)
          if printf '%s' "$KUBE_CONFIG_DATA" | base64 --decode > "$TMP" 2>/dev/null || \
             printf '%s' "$KUBE_CONFIG_DATA" | base64 -d > "$TMP" 2>/dev/null; then
            if looks_like_kube "$TMP"; then
              mv "$TMP" "$K"
              chmod 600 "$K"
              echo "Restored kubeconfig (base64 decoded)"
              exit 0
            fi
          fi

          # 4) strip surrounding quotes and repeat
          STR=$(printf '%s' "$KUBE_CONFIG_DATA")
          STR="${STR#\"}"
          STR="${STR%\"}"

          printf '%s' "$STR" > "$TMP"
          if looks_like_kube "$TMP"; then
            mv "$TMP" "$K"
            chmod 600 "$K"
            echo "Restored kubeconfig (stripped quotes)"
            exit 0
          fi

          if printf '%s' "$STR" | base64 --decode > "$TMP" 2>/dev/null || \
             printf '%s' "$STR" | base64 -d > "$TMP" 2>/dev/null; then
            if looks_like_kube "$TMP"; then
              mv "$TMP" "$K"
              chmod 600 "$K"
              echo "Restored kubeconfig (stripped quotes + base64 decoded)"
              exit 0
            fi
          fi

          # Failed — safe diagnostics
          LEN=$(printf '%s' "$KUBE_CONFIG_DATA" | wc -c)
          LINES=$(printf '%s' "$KUBE_CONFIG_DATA" | wc -l)
          IS_BASE64=$(printf '%s' "$KUBE_CONFIG_DATA" | tr -d '\n' | grep -Eq '^[A-Za-z0-9+/=]+$' && echo "yes" || echo "no")
          echo "Failed to restore kubeconfig. Diagnostics: length=${LEN}, lines=${LINES}, looks_like_base64=${IS_BASE64}" >&2
          exit 1

      - name: Ensure namespace exists
        run: |
          kubectl create namespace stage --dry-run=client -o yaml | kubectl apply -f -

      - name: Create GHCR imagePullSecret in namespace 'stage' (optional)
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${GHCR_TOKEN:-}" ]; then
            echo "GHCR_TOKEN not set; skipping creation of ghcr-regcred secret"
            exit 0
          fi
          kubectl -n stage delete secret ghcr-regcred --ignore-not-found
          kubectl -n stage create secret docker-registry ghcr-regcred \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${GHCR_TOKEN}" \
            --docker-email=github-actions@github.com

      - name: Quick kubectl checks
        run: |
          kubectl config current-context || true
          kubectl auth can-i get pods --all-namespaces || true

      - name: Deploy to Kubernetes (update image)
        env:
          IMAGE: ${{ needs.build.outputs.image }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          FULL_IMAGE="${IMAGE}:${IMAGE_TAG}"
          echo "Deploying $FULL_IMAGE to namespace 'stage'"
          kubectl -n stage set image deployment/test-app test-app="$FULL_IMAGE" --record
          kubectl -n stage rollout status deployment/test-app --timeout=2m
