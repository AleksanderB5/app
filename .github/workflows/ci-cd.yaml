name: CI/CD - build, push, deploy on tag

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

env:
  IMAGE_NAME: ghcr.io/AleksanderB5/app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        run: |
          echo "GITHUB_SHA_SHORT=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
      - name: Build & push (branch)
        if: ${{ steps.meta.outputs.IS_TAG == 'false' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.GITHUB_SHA_SHORT }}
            ${{ env.IMAGE_NAME }}:latest
          build-args: |
            GIT_COMMIT=${{ github.sha }}
      - name: Build & push (tag)
        if: ${{ steps.meta.outputs.IS_TAG == 'true' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.RELEASE_TAG }}
            ${{ env.IMAGE_NAME }}:latest
          build-args: |
            GIT_COMMIT=${{ github.sha }}

  deploy-on-tag:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          curl -sL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          yq --version

      - name: Decode kubeconfig (base64 or raw)
        run: |
          mkdir -p $HOME/.kube
          if printf '%s' "${{ secrets.KUBE_CONFIG }}" | grep -q "^apiVersion:"; then
            printf '%s\n' "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          else
            echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          fi
          chmod 600 $HOME/.kube/config

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Extract deployment info from stage/deploy.yaml and deploy
        env:
          IMAGE: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        run: |
          set -euo pipefail
          MANIFEST="stage/deploy.yaml"
          if [ ! -f "$MANIFEST" ]; then
            echo "Manifest $MANIFEST not found in repo"
            exit 1
          fi

          DEPLOYMENT_NAME=$(yq e 'select(.kind == "Deployment") | .metadata.name' "$MANIFEST")
          NAMESPACE=$(yq e 'select(.kind == "Deployment") | .metadata.namespace // "default"' "$MANIFEST")
          CONTAINER_NAME=$(yq e 'select(.kind == "Deployment") | .spec.template.spec.containers[0].name' "$MANIFEST")

          echo "Found: deployment=${DEPLOYMENT_NAME}, namespace=${NAMESPACE}, container=${CONTAINER_NAME}"
          if [ -z "${DEPLOYMENT_NAME}" ] || [ -z "${CONTAINER_NAME}" ]; then
            echo "Failed to extract deployment/container names"
            exit 1
          fi

          echo "Deploying ${IMAGE} to ${DEPLOYMENT_NAME} (container ${CONTAINER_NAME}) in namespace ${NAMESPACE}"
          kubectl -n "${NAMESPACE}" set image deployment/"${DEPLOYMENT_NAME}" "${CONTAINER_NAME}"=${IMAGE} --record
          kubectl -n "${NAMESPACE}" rollout status deployment/"${DEPLOYMENT_NAME}" --timeout=180s
