name: CI/CD

on:
  push:
    branches: ["main"]
    # Теги формата vMAJOR.MINOR.PATCH, напр. v1.0.0
    tags:
      - "v*.*.*"

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE to lowercase (job output + env)
        id: set-image
        run: |
          IMAGE=ghcr.io/$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (sha + latest)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.set-image.outputs.image }}:${{ github.sha }}
            ${{ steps.set-image.outputs.image }}:latest

      - name: Push audit (verify sha + latest exist in registry)
        if: "!startsWith(github.ref, 'refs/tags/')"
        env:
          IMAGE: ${{ steps.set-image.outputs.image }}
        run: |
          set -euo pipefail
          for TAG in "${GITHUB_SHA}" latest; do
            IMG="$IMAGE:$TAG"
            echo "Inspecting $IMG"
            # try buildx imagetools, fallback to docker manifest inspect
            docker buildx imagetools inspect "$IMG" || docker manifest inspect "$IMG" || {
              echo "WARNING: cannot inspect $IMG"
            }
          done

      - name: Build and push (tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.set-image.outputs.image }}:${{ github.ref_name }}

      - name: Push audit (verify tag image in registry)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          IMAGE: ${{ steps.set-image.outputs.image }}
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          IMG="$IMAGE:$TAG"
          echo "Inspecting $IMG"
          docker buildx imagetools inspect "$IMG" || docker manifest inspect "$IMG" || {
            echo "WARNING: cannot inspect $IMG"
          }

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Restore kubeconfig
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          set -euo pipefail

          echo "Restoring kubeconfig..."
          mkdir -p "$HOME/.kube"

          if [ -z "${KUBE_CONFIG_DATA:-}" ]; then
            echo "KUBE_CONFIG_DATA is empty" >&2
            exit 1
          fi

          # Если секрет уже plain kubeconfig (обычно содержит apiVersion:)
          if printf '%s' "$KUBE_CONFIG_DATA" | grep -q 'apiVersion:'; then
            printf '%s' "$KUBE_CONFIG_DATA" > "$HOME/.kube/config"
          else
            # Попытка декодирования base64 (--decode для GNU, -d для BSD)
            if printf '%s' "$KUBE_CONFIG_DATA" | base64 --decode > "$HOME/.kube/config" 2>/dev/null; then
              :
            elif printf '%s' "$KUBE_CONFIG_DATA" | base64 -d > "$HOME/.kube/config" 2>/dev/null; then
              :
            else
              echo "Failed to decode KUBE_CONFIG_DATA as base64 and it doesn't look like kubeconfig" >&2
              exit 1
            fi
          fi

          chmod 600 "$HOME/.kube/config"
          echo "kubeconfig restored to $HOME/.kube/config"

      - name: Ensure namespace exists
        run: |
          kubectl create namespace stage --dry-run=client -o yaml | kubectl apply -f -

      - name: Create GHCR imagePullSecret in namespace 'stage' (optional)
        # Создаётся только если в Secrets задан GHCR_TOKEN
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${GHCR_TOKEN:-}" ]; then
            echo "GHCR_TOKEN not set; skipping creation of ghcr-regcred secret"
            exit 0
          fi
          # Обновим/создадим секрет ghcr-regcred в namespace stage
          kubectl -n stage delete secret ghcr-regcred --ignore-not-found
          kubectl -n stage create secret docker-registry ghcr-regcred \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${GHCR_TOKEN}" \
            --docker-email=github-actions@github.com

      - name: Quick kubectl checks
        run: |
          kubectl config current-context || true
          kubectl auth can-i get pods --all-namespaces || true

      - name: Deploy to Kubernetes (update image)
        env:
          IMAGE: ${{ needs.build.outputs.image }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          FULL_IMAGE="${IMAGE}:${IMAGE_TAG}"
          echo "Deploying $FULL_IMAGE to namespace 'stage'"
          kubectl -n stage set image deployment/test-app test-app="$FULL_IMAGE" --record
          kubectl -n stage rollout status deployment/test-app --timeout=2m
